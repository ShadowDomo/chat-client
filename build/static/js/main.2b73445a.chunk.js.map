{"version":3,"sources":["DetailsContext.tsx","RoomInput.tsx","Message.tsx","Room.tsx","App.tsx","index.tsx"],"names":["DetailsContext","createContext","RoomInput","useState","localUsername","setLocalUsername","localRoomCode","setLocalRoomCode","useContext","usernames","setUsername","room","setRoomCode","history","useHistory","className","type","value","onChange","e","target","onClick","push","Message","message","userUsername","prevMessage","username","status","color","textColor","borderRadius","justifyValue","alignItemsvalue","style","maxWidth","data-tip","Date","parseInt","time","toLocaleTimeString","toString","content","normalMessage","Room","roomCode","messages","setMessages","setMessage","socket","setSocket","typingUsers","setTypingUsers","emptyDiv","useRef","addMessage","currentMessages","newMessages","useEffect","mounted","io","process","emit","on","val","obj","currentUsers","filter","user","includes","disconnect","current","scrollIntoView","behavior","maxHeight","marginBottom","map","index","ref","length","join","usersTyping","placeholder","marginRight","preventDefault","sendMessage","App","Provider","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b73445a.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const DetailsContext = createContext<any>(null);\r\n","import { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DetailsContext } from \"./DetailsContext\";\r\n\r\nconst RoomInput = () => {\r\n  const [localUsername, setLocalUsername] = useState<string>(\"\");\r\n  const [localRoomCode, setLocalRoomCode] = useState<string>(\"\");\r\n\r\n  const [username, setUsername] = useContext(DetailsContext).usernames;\r\n  const [roomCode, setRoomCode] = useContext(DetailsContext).room;\r\n  const history = useHistory();\r\n\r\n  function joinRoom() {\r\n    setUsername(localUsername);\r\n    setRoomCode(localRoomCode);\r\n    history.push(\"/room\");\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <h1>Chat room</h1>\r\n      <div className=\"form-group\">\r\n        <label className=\"\">Username</label>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          value={localUsername}\r\n          onChange={(e) => setLocalUsername(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group mt-2\">\r\n        <label className=\"\">Room Code</label>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          value={localRoomCode}\r\n          onChange={(e) => setLocalRoomCode(e.target.value)}\r\n        />\r\n      </div>\r\n      <button onClick={joinRoom} className=\"btn btn-primary mt-2\">\r\n        Join room\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default RoomInput;\r\n","import { MessageObject } from \"./Room\";\r\nimport ReactToolTip from \"react-tooltip\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\ninterface Props {\r\n  message: MessageObject;\r\n  userUsername: string;\r\n  prevMessage: MessageObject | null;\r\n}\r\nconst Message = ({ message, userUsername, prevMessage }: Props) => {\r\n  function statusMessage() {\r\n    return (\r\n      <div className=\"rounded py-1 px-2 mb-1\">\r\n        <div className=\"d-flex justify-content-center\">\r\n          <small className=\"\">\r\n            {message.username} {message.status}\r\n          </small>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function normalMessage() {\r\n    // float to right if you are message writer\r\n    let justifyValue = \"justify-content-\";\r\n    let alignItemsvalue = \"align-items-\";\r\n    let color;\r\n    let textColor;\r\n    let borderRadius;\r\n\r\n    if (message.username === userUsername) {\r\n      justifyValue += \"end\";\r\n      alignItemsvalue += \"end\";\r\n      color = \"bg-primary\";\r\n      textColor = \"text-white\";\r\n      borderRadius = \"18px 4px 4px 18px\";\r\n    } else {\r\n      justifyValue += \"start\";\r\n      alignItemsvalue += \"start\";\r\n      color = \"bg-white\";\r\n      textColor = \"text-black\";\r\n      borderRadius = \"4px 18px 18px 4px\";\r\n    }\r\n\r\n    function renderUsername() {\r\n      if (prevMessage === null) {\r\n        return <small className=\"text-secondary\">{message.username}</small>;\r\n      }\r\n      if (\"status\" in prevMessage) {\r\n        return <small className=\"text-secondary\">{message.username}</small>;\r\n      }\r\n      if (prevMessage.username !== message.username) {\r\n        return <small className=\"text-secondary\">{message.username}</small>;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <div className={`d-flex ${justifyValue}`}>\r\n        <div\r\n          className={`d-flex flex-column ${alignItemsvalue}`}\r\n          style={{ maxWidth: \"70%\" }}\r\n          data-tip={new Date(parseInt(message.time))\r\n            .toLocaleTimeString(\"en-AU\")\r\n            .toString()}\r\n        >\r\n          <ReactToolTip />\r\n          {renderUsername()}\r\n          <div\r\n            className={`border border-secondary mt-1 p-2 ${color}`}\r\n            style={{\r\n              borderRadius: borderRadius,\r\n            }}\r\n          >\r\n            <p className={`${textColor} mb-0 `}>{message.content}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function body() {\r\n    if (\"status\" in message) {\r\n      return statusMessage();\r\n    }\r\n\r\n    return normalMessage();\r\n  }\r\n\r\n  return body();\r\n};\r\nexport default Message;\r\n","import io from \"socket.io-client\";\r\nimport { useState, useEffect, useContext, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DetailsContext } from \"./DetailsContext\";\r\nimport Message from \"./Message\";\r\nimport \"./CSS/room.css\";\r\n\r\nconst SOCKET_SERVER: any = process.env.REACT_APP_SOCKET_SERVER;\r\n\r\nexport interface MessageObject {\r\n  content?: string;\r\n  username: string;\r\n  time: string;\r\n  status?: string;\r\n}\r\n\r\nconst Room = () => {\r\n  const [username, setUsername] = useContext(DetailsContext).usernames;\r\n  const [roomCode, setRoomCode] = useContext(DetailsContext).room;\r\n  const [messages, setMessages] = useState<MessageObject[]>([]);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [socket, setSocket] = useState<any>(null);\r\n  const [typingUsers, setTypingUsers] = useState<string[]>([]);\r\n  const history = useHistory();\r\n  const emptyDiv: any = useRef(null);\r\n\r\n  /** Adds a message */\r\n  function addMessage(message: MessageObject) {\r\n    setMessages((currentMessages) => {\r\n      const newMessages = [...currentMessages];\r\n      // if (newMessages.length > 9) {\r\n      //   newMessages.shift();\r\n      // }\r\n\r\n      newMessages.push(message);\r\n      return newMessages;\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    const socket = io(SOCKET_SERVER);\r\n    setSocket(socket);\r\n    if (username === \"\" || roomCode === \"\") {\r\n      history.push(\"/\");\r\n    }\r\n\r\n    if (mounted) {\r\n      socket.emit(\"joinRoom\", { username: username, roomCode: roomCode });\r\n\r\n      // whenever new user joins\r\n      socket.on(\"joinedRoom\", (val) => {\r\n        // console.log(val);\r\n        addMessage({ ...val, status: \"has joined the room\" });\r\n      });\r\n\r\n      socket.on(\"message\", (message) => {\r\n        // console.log(message);\r\n        addMessage(message);\r\n      });\r\n\r\n      socket.on(\"disconnected\", (message) => {\r\n        // console.log(message);\r\n        addMessage({ ...message, status: \"has left the room\" });\r\n      });\r\n\r\n      socket.on(\"typingEnded\", (obj) => {\r\n        // addMessage({ ...obj, status: \"is typing...\" });\r\n        setTypingUsers((currentUsers) => {\r\n          const newUsers = [...currentUsers];\r\n          return newUsers.filter((user) => user !== obj.username);\r\n        });\r\n        // console.log(\"ended\");\r\n      });\r\n\r\n      socket.on(\"typingStarted\", (obj) => {\r\n        // console.log(message);\r\n        // console.log(obj);\r\n        setTypingUsers((currentUsers: string[]) => {\r\n          if (!currentUsers.includes(obj.username)) {\r\n            return [...currentUsers, obj.username];\r\n          }\r\n          return currentUsers;\r\n        });\r\n      });\r\n    }\r\n    return () => {\r\n      mounted = false;\r\n      socket.disconnect();\r\n    };\r\n  }, [username, roomCode]);\r\n\r\n  useEffect(() => {\r\n    emptyDiv.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  function sendMessage(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    e.preventDefault();\r\n    setMessage(\"\");\r\n    socket.emit(\"message\", {\r\n      content: message,\r\n      username: username,\r\n    });\r\n  }\r\n\r\n  function typing() {\r\n    // emptyDiv.current.scrollIntoView({ behavior: \"smooth\" });\r\n    socket.emit(\"typing\", { username: username });\r\n  }\r\n\r\n  function usersTyping() {\r\n    if (typingUsers.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (typingUsers.length === 1) {\r\n      return <small className=\"\">{typingUsers.toString()} is typing...</small>;\r\n    }\r\n\r\n    return (\r\n      <small className=\"mb-2\">{typingUsers.join(\", \")} are typing...</small>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column container overflow-auto\">\r\n      <h1 className=\"row mt-5\">Chat room - {roomCode}</h1>\r\n      <div\r\n        className=\"row overflow-auto\"\r\n        style={{\r\n          maxHeight: \"76vh\",\r\n          marginBottom: \"120px\",\r\n        }}\r\n      >\r\n        <div className=\"col \">\r\n          {messages.map((message, index) => (\r\n            <Message\r\n              key={index}\r\n              prevMessage={index > 0 ? messages[index - 1] : null}\r\n              message={message}\r\n              userUsername={username}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div ref={emptyDiv}></div>\r\n      </div>\r\n      <div className=\"fixed-bottom mb-5 container\">\r\n        <div className=\"text-center\">{usersTyping()}</div>\r\n        <form className=\"form-group d-flex mt-1\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Type something...\"\r\n            style={{ marginRight: \"15px\" }}\r\n            value={message}\r\n            onChange={(e) => {\r\n              typing();\r\n              setMessage(e.target.value);\r\n            }}\r\n          />\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            type=\"submit\"\r\n            onClick={(e) => sendMessage(e)}\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import { useState } from \"react\";\nimport RoomInput from \"./RoomInput\";\nimport Room from \"./Room\";\nimport { DetailsContext } from \"./DetailsContext\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [username, setUsername] = useState<string>(\"\");\n  const [roomCode, setRoomCode] = useState<string>(\"\");\n\n  return (\n    <div className=\"App container\">\n      <Router>\n        <DetailsContext.Provider\n          value={{\n            usernames: [username, setUsername],\n            room: [roomCode, setRoomCode],\n          }}\n        >\n          <Switch>\n            <Route path=\"/room\">\n              <Room />\n            </Route>\n            <Route path=\"/\">\n              <RoomInput />\n            </Route>\n          </Switch>\n        </DetailsContext.Provider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}